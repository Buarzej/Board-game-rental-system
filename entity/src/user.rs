//! `SeaORM` Entity, partially @generated by sea-orm-codegen 1.1.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[serde(skip_deserializing)]
    pub id: i32,
    pub name: String,
    pub surname: String,
    #[sea_orm(unique)]
    pub email: String,
    pub password_hash: String,
    #[sea_orm(default_value = 0)]
    pub penalty_points: u8,
    #[sea_orm(default_value = false)]
    pub is_admin: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::favourite::Entity")]
    Favourite,
    #[sea_orm(has_many = "super::rental::Entity")]
    Rental,
    #[sea_orm(has_many = "super::rental_history::Entity")]
    RentalHistory,
}

impl Related<super::favourite::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Favourite.def()
    }
}

impl Related<super::rental::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Rental.def()
    }
}

impl Related<super::rental_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RentalHistory.def()
    }
}

impl Related<super::board_game::Entity> for Entity {
    fn to() -> RelationDef {
        super::favourite::Relation::BoardGame.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::favourite::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
